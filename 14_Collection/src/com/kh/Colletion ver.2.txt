Colletion ver.2
2024-08-07 

1. 제네릭 설정 X
// > 저장되는 데이터의 순서 유지 X, 중족 저장 X
//   제네릭 설정을 안했을경우 아무 타입이나 다 저장 가능
> Set 계열 또한 유용한 메소드들이 많지만,  대부분 List 계열과 메소드 사용법이 거의 비슷하다.
- 왜? Set, List 계열 모두 Colletion 인터페이스 계열 자식들이기 떄문


2. 제네릭 설정 O
> 저장 순서 유지 X, 중복 저장 O  (제네릭을 설정했기 때문에 같은 타입만 저장됨!!)
 왜 ? 중복 저장이 되었는가?
> 동일한 객체로 판단이 되지 않아서 중복 저장됨!!
* HashSet 은 값이 추가될 떄
equals(), hashCode() 메소드를 통해
동일한 데이터가 있는 없는지 검사 후 add 해줌

HashSet 에 객체를 담을 때 
- 내부적으로 equals() 로 비교 - 주소값 동등비교 + 내부적으로 각 hashCode() 값이 일치하는지도 비교 - 주소값 동등비교
그래서 hs2.add(new Student("이민호",37,100)); 이걸 두번해도 두번다 들어간다
> 즉, "주소값"을 기준으로 중복판별을 한다!!

객체의 각 필드값이 일치하면 동일한 객체로 판별이 되서 중복저장이 안되게끔 하고싶을 경우?
> 데이터 값 기준으로 내용물을 비교하게 eqauls(), hashCode() 메소드를 오버라이딩 하기!!

기존 Object 클래스의 메소드
- equals() : 주소값 동등비교
- hashCode() : 주소값 십진수로
Student 클래스 메소드 오버라이딩
- equals() : 내용물 동등비교
- hashCode() : 내용물을 십진수로
> VO 클래스 작성 시 해당 VO 타입으 ㅣ객체를 가지고 HashSet 에 저장할 일이 있다면
필드값을 기준으로 동등비교 하는 equals 와 필드값을 기준으로 동작하는  hashCode 메소드를 오버라이딩 해서 쓰는 것을 권장함
> 만약 HashSet 에 저장할 일이 없다면 굳이 오버라이딩 안해도 됨!! (필수는 아님)


Set 에 들어있는 데이터에 "순차적" 으로 접근하고자 할때 ?
Set : 무작위 객체 저장되어있음 (즉 , index 개념이 없음)
> 일반 for문 사용 불가
1. 향상된 for문 사용 가능 (foreach문) >>  for(변수선언문 : 셋명)
> 구문 표현법 어디에도 index 에 대한 언급이 없기 때문에 사용 가능
2. 기존 Set 에 저장된 데이터를 ArrayList 로 옴겨준 후 해당 ArrayList 기준으로 일반 for문을 돌리는 방법
Set 의 데이터를 List로 옮기는 방법
1) 빈 ArrayList 객체 생성 후 addAll 메소드롤 활용
ArrayList<Student> list = new ArrayList<>();
list.addAll(hs2);
> 빈 리스트 생성 후 addAll 로 통째로 데이터 추가


// HashMap 사용 방법

HashMap 객체 먼저 생성
명심할 사항 : 계층구조를 보면 List 나 Set 계열은 Collection 을 구현한 클래스
> value 만 저장 가능, 데이터를 추가할 때 add 메소드 (다른메소드 또한 사용법 비슷)
단, Map 은 아니다.
> key + value 구조로 저장, 데이터를 추가할 때 put 메소드 (메소드 사용 방법도 아예 다름)
K : Key == Object
V : Value == Object
> 제네릭 설정을 하지 않았기 떄문

> 항상 key + value 형식으로 데이터 보관
value 는 중복값 허용 O, key는 중복값 허용 X
저장순서 유지 X


* Properties 
> Map 계열 : key + value 세트로 저장됨
저장 순서 유지 X key 중복 X, value 중복 O
> 단, Properties 만의 특징이라고 한다면
 Key, Value 모두 String 타입으로 제한되어있다!! (애초에 객체 생성 시 제네릭 설정도 하지 않음, 무조건 String 으로 고정)
>  Key, Value 모두 String 타입으로 제한되어있는 이유는 Properties 에 담긴 데이터를 "파일 입출력" 해주는 별도의 메소드가 존재


* * .properties 파일
해당 프로그램이 기본적으로 가져야 하는 정보들을 보통 .properties 형식의 파일로 저장해둔다. (보통 "환경설정" 과 관련된 값들)
key, value 모두 문자열이기 때문에 Properties 객체와 함께 유용하게 사용가능!!
> key, value 모두 일반 텍스트 문자열이기 때문에 개발자가 아닌 일반 관리자 입장에서 환경설정값을 다루기 쉬워짐
* .xml 파일
방대한 데이터를 "구조화된 (<태그>로 감싸서) " 형식으로 저장하기 위한 파일 다양한 프로그래밍 언어 간에 호환이 쉽다.

> .properties 파일과 차이점이라고 한다면
properties 파일은 한줄짜리 밸류값만 표현 가능함!!
xml 파일은 여러줄짜리 밸류값을 표현 가능함!!
> JDBC 파트에서 사용할 예정!!




